plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'application'
    id 'jacoco'
}

group = 'com.github.hebertsouza87'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:3.1.1'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.jbehave:jbehave-spring:5.2.0'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.postgresql:postgresql'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jbehave:jbehave-core:5.2.0'
    testImplementation 'org.testcontainers:testcontainers:1.19.7'
    testImplementation 'org.testcontainers:postgresql:1.19.7'
    testImplementation 'org.testcontainers:kafka:1.19.7'
}

application {
    mainClassName = 'com.github.hebertsouza87.pokeTreiner.PokeTreinerApplication'
}

bootJar {
    enabled = true
    mainClassName = 'com.github.hebertsouza87.poketr.PokeTreinerRegisterApplication'
}

jar {
    enabled = false
}

test {
    useJUnitPlatform()
    systemProperty 'spring.application.name', 'pokeTreiner-test'
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'spring.jpa.hibernate.ddl-auto', 'none'
    systemProperty 'spring.datasource.driver-class-name', 'org.postgresql.Driver'
    systemProperty 'spring.flyway.enabled', 'false'
    systemProperty 'gateway.pokeapi.url', 'https://pokeapi.co/api/v2'
    systemProperty 'kafka.bootstrap-servers', 'localhost:9092'
    systemProperty 'kafka.consumer.group-id', 'group_id'
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':build')) {
        test.enabled = false
    }
}

jacocoTestReport {
    reports {
        html.destination file("${buildDir}/jacocoHtml")
    }
    dependsOn test
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/KafkaConfig.class',
                              '**/PokeTreinerApplication.class',
                              '**/*get*',
                              '**/*set*']
            )
        }))
    }

    violationRules {
        rule {
            excludes = ['**/*get*', '**/*set*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }

        rule {
            excludes = ['**/*get*', '**/*set*']
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.77
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification